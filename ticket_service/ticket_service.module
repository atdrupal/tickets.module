<?php

/**
 * Implement hook hook_services_resources()
 */
function ticket_service_services_resources() {
  $info = array();
  $entities = array('ticket_id' => 'ticket', 'ticket_cid' => 'ticket category');
  if (module_exists('ticket_comments')) {
    $entities += array('comment_id' => 'ticket_comments');
  }
  foreach ($entities as $entity_id => $entity) {
    $args = ticket_sevice_args_info($entity_id, $entity);
    $info += ticket_service_info($entity, $args);
  }
    
  return $info;
  
}


/**
 * Get entity info
 */
function ticket_service_info($entity_type, $args) {
  $operations = array('create', 'retrieve', 'update', 'delete', 'index');
  $info = array();
  foreach ($operations as $operation) {
    $info[$entity_type][$operation] = array(
      'callback' => "_ticket_service_resources_{$operation}",
      'file' => array('type' => 'inc', 'module' => 'ticket_service', 'name' => 'ticket_service.resources'),
      'description' => "{$operation} a {$entity_type}.",
      'args' => $args[$operation],
      'access callback' => "_ticket_service_resources_access",
      'access arguments' => array($operation),
      'access arguments append' => TRUE,
    );
  }
  return $info;

  
}

/**
 * Get args
 */
function ticket_sevice_args_info($entity_id, $entity_type) {
  $args['create'] = array(
      array(
        'name' => 'values',
        'optional' => FALSE,
        'source' => 'data',
        'description' => 'The values used to create the ' . $entity_type  . '  entity',
        'type' => 'struct',
      ),
  );
  $args['retrieve'] = array(
    array(
      'name' => $entity_id,
      'optional' => FALSE,
      'source' => array('path' => 0),
      'type' => 'int',
      'description' => 'The ID of the ' . $entity_type  . '  to retrieve.',
    ),
    array(
      'name' => 'fields',
      'optional' => TRUE,
      'type' => 'string',
      'description' => 'A comma separated list of fields to get.',
      'default value' => '*',
      'source' => array('param' => 'fields'),
    ),
  );
  $args['update'] = array(
    array(
      'name' => $entity_id,
      'optional' => FALSE,
      'source' => array('path' => 0),
      'type' => 'int',
      'description' => 'The ID of the ' . $entity_type  . '  to retrieve.',
    ),
    array(
      'name' => 'values',
      'optional' => FALSE,
      'source' => 'data',
      'description' => 'The ' . $entity_type  . '  entity data to update',
      'type' => 'struct',
    ),
  );
  
  $args['delete'] = array(
    array(
      'name' => $entity_id,
      'optional' => FALSE,
      'source' => array('path' => 0),
      'type' => 'int',
      'description' => 'The ID of the ' . $entity_type  . '  to retrieve.',
    ),
  );
  $args['index'] = array(
    /**
     * Fields to return
     * 
     * these should be specified in a comma separated list like ?fields=title,created,uid
     */
    array(
      'name' => 'fields',
      'optional' => TRUE,
      'type' => 'string',
      'description' => 'A comma separated list of fields to get.',
      'default value' => '*',
      'source' => array('param' => 'fields'),
    ),
    /**
     * Filter parameters
     * 
     * these should be specified by ?param[title]=My Title&param[created]=4403305
     */
    array(
      'name' => 'parameters',
      'optional' => TRUE,
      'type' => 'array',
      'description' => 'Filter parameters array such as param[title]="test"',
      'default value' => array(),
      'source' => array('param' => 'param'),
    ),
    /**
     * Page number
     * 
     * A zero based page number like ?page=3 (returns the fourth page)
     */
    array(
      'name' => 'page',
      'optional' => TRUE,
      'type' => 'int',
      'description' => 'The zero-based index of the page to get, defaults to 0.',
      'default value' => 0,
      'source' => array('param' => 'page'),
    ),
    /**
     * Page Size
     * 
     * How many records per page to return. ?pagesize=20
     */
    array(
      'name' => 'pagesize',
      'optional' => TRUE,
      'type' => 'int',
      'description' => 'Number of records to get per page.',
      'default value' => 20,
      'source' => array('param' => 'pagesize'),
    ),
    /**
     * Sort field
     * 
     * Which field to sort on. ?sort=created
     */
    array(
      'name' => 'sort',
      'optional' => TRUE,
      'type' => 'string',
      'description' => 'Field to sort by.',
      'default value' => '',
      'source' => array('param' => 'sort'),
    ),
    /**
     * Sort Direction
     * 
     * Which direction to sort. Possible Values = "ASC|DESC" ?direction=DESC
     */
    array(
      'name' => 'direction',
      'optional' => TRUE,
      'type' => 'string',
      'description' => 'Direction of the sort. ASC or DESC.',
      'default value' => 'ASC',
      'source' => array('param' => 'direction'),
    ),
  );
  
  
  $type = array(
    'name' => 'entity_type',
    'optional' => TRUE,  // Otherwise throws an error
    'default value' => $entity_type,
    'type' => 'string',
    'description' => 'The type of the entity to get',
  );
  
  foreach ($args as $op => $arg) {
    $args[$op] += $type;
  }
  
  return $args;
}