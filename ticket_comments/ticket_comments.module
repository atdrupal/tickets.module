<?php

require_once dirname(__FILE__) . '/controller/TicketCommentEntityMetaController.php';
require_once dirname(__FILE__) . '/controller/TicketComment.php';
require_once dirname(__FILE__) . '/controller/TicketCommentUIController.php';
require_once dirname(__FILE__) . '/ticket_comments.admin.inc';
require_once dirname(__FILE__) . '/ticket_comments.inc';

/**
 * Implements hook_entity_info().
 */
function ticket_comments_entity_info() {
  
  $info['ticket_comments'] = array(
    'label' => 'Ticket comment',
    'module' => 'ticket_comments',
    'base table' => 'ticket_comments',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ticket_comments_access_callback',
    'label callback' => 'ticket_comments_label_callback',
    'controller class' => 'EntityAPIController', // 'Lgentity_Entity_MachineController',
    'entity class' => 'TicketComment',
    'metadata controller class' => 'TicketCommentEntityMetaController',
    'entity keys' => array('id' => 'comment_id', 'bundle' => 'type'),
    'bundle keys' => array('bundle' => 'type'),
    'bundles' => array(
      'ticket_comments' => array(
        'label' => 'Ticket Comments',
        'admin' => array(
          'path' => 'admin/structure/ticket-comments',
          'access arguments' => array('administer ticket comments'),
        ),
      ),
    ),
    'admin ui' => array(
      'path' => 'admin/structure/ticket-comments',
      'file' => 'ticket_comments.admin.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
  );
  
  return $info;
}


/**
 * Access callback for machine entity.
 */
function ticket_comments_access_callback($op, $entity, $account, $entity_type) {
  return user_access('administer ticket comment');
}

/**
 * Label callback for machine entity.
 */
function ticket_comments_label_callback($entity, $entity_type) {
  return ucwords($entity->name);
}
/**
 * Implements hook_ticket_view()
 */
function ticket_comments_ticket_view($ticket, $view_mode, $langcode) {
  if ($view_mode == 'full') {
      $ticket->content['comments'] = ticket_comments_page_additions($ticket);
  }
}

function ticket_comments_theme() {
  return array(
    'ticket_comments_wrapper' => array(
      'template' => 'ticket-comments-wrapper',
      'render element' => 'content',
    ),
    'ticket_comments' => array(
      'render element' => 'elements',
      'template' => 'ticket_comments',
    ),
  );
}

/**
 * Build the comment-related elements for ticket detail pages.
 *
 * @param $ticket
 *  A ticket object.
 */
function ticket_comments_page_additions($ticket) {
  //Get comment form
  $ticket_comment = ticket_comments_create(array('type' => 'ticket_comments'));
  $build = drupal_get_form('ticket_comments_form', $ticket_comment, 'add', 'ticket_comments', $ticket);
  $additions['comment_form'] = $build;
  
  //Get comments on ticket
  $ticket_comments = ticket_comments_load_multiple(FALSE, array('ticket_id' => $ticket->ticket_id));
  if (!empty($ticket_comments)) {
    $build = ticket_comments_view_multiple($ticket_comments, $ticket);
    $build['pager']['#theme'] = 'pager';
    $additions['comments'] = $build;
  }
  
  if ($additions) {
    $additions += array(
      '#theme' => 'ticket_comments_wrapper',
      '#ticket' => $ticket,
      'comments' => array(),
      'comment_form' => array(),
    );
  }
  return $additions;
}

function ticket_comments_view($ticket_comment, $ticket, $view_mode = 'full', $langcode = NULL) {   
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  // Allow modules to change the view mode.
  $context = array(
    'entity_type' => 'ticket_comments',
    'entity' => $ticket_comment,
    'langcode' => $langcode,
  );
  drupal_alter('entity_view_mode', $view_mode, $context);
  
  $ticket_comment->content['#ticket_comments'] = $ticket_comment;
  
  field_attach_prepare_view('ticket_comments', array($ticket_comment->comment_id => $ticket_comment), $view_mode, $langcode);
  entity_prepare_view('ticket_comments', array($ticket_comment->comment_id => $ticket_comment), $langcode);
  $ticket_comment->content += field_attach_view('ticket_comments', $ticket_comment, $view_mode, $langcode);

  // Allow modules to make their own additions to the comment.
  module_invoke_all('ticket_comments_view', $ticket_comment, $view_mode, $langcode);
  module_invoke_all('entity_view', $ticket_comment, 'ticket_comments', $view_mode, $langcode);
  $ticket_comment->content['#ticket'] = $ticket;
  $ticket_comment->content += array('#view_mode' => $view_mode);
  $build = $ticket_comment->content;
  
  unset($ticket_comment->content);
  // We don't need duplicate rendering info in ticket_comment->content.

  $build += array(
    '#theme' => 'ticket_comments',
    '#elements' => $ticket_comment,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );
  return $build;
}

function ticket_comments_view_multiple($ticket_comments, $ticket, $view_mode = 'full', $weight = 0, $langcode = NULL) {
  field_attach_prepare_view('ticket_comments', $ticket_comments, $view_mode, $langcode);
  entity_prepare_view('ticket_comments', $ticket_comments, $langcode);

  $build = array(
    '#sorted' => TRUE,
  );
  foreach ($ticket_comments as $ticket_comment) {
    $build[$ticket_comment->comment_id] = ticket_comments_view($ticket_comment, $ticket, $view_mode, $langcode);
    $build[$ticket_comment->comment_id]['#weight'] = $weight;
    $weight++;
  }
  return $build;
}


/**
 * Implements hook_permission
 */
function ticket_comments_permission() {
  
}


function template_preprocess_ticket_comments(&$variables) {
  $ticket_comments = $variables['elements']['#ticket_comments'];
  $ticket = $variables['elements']['#ticket'];
  $variables['ticket_comments']   = $ticket_comments;
  $variables['ticket']      = $ticket;
  
  
  $variables['created']   = format_date($ticket_comments->created);
  $variables['changed']   = format_date($ticket_comments->changed);

  $account = user_load($ticket_comments->uid);
  $variables['author']    = theme('username', array('account' => $account));
  $variables['picture']   = theme_get_setting('toggle_comment_user_picture') ? theme('user_picture', array('account' => $account)) : '';
  $variables['signature'] = $account->signature;

  $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['author'], '!datetime' => $variables['created']));

  field_attach_preprocess('ticket_comments', $ticket_comments, $variables['elements'], $variables);

  // Helpful $content variable for templates.
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['classes_array'][] = 'comment';
  kpr($variables);
}