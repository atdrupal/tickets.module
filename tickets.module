<?php


require_once dirname(__FILE__) . '/lib/Ticket.php';
require_once dirname(__FILE__) . '/lib/TicketUIController.php';
require_once dirname(__FILE__) . '/lib/TicketEntityMetaController.php';
require_once dirname(__FILE__) . '/lib/TicketCategoryEntityMetaController.php';
require_once dirname(__FILE__) . '/includes/tickets.fields.inc';
require_once dirname(__FILE__) . '/lib/TicketCategory.php';
require_once dirname(__FILE__) . '/lib/TicketCategoryUIController.php';
require_once dirname(__FILE__) . '/lib/TicketCategoryInlineEntityForm.php';


require_once dirname(__FILE__) . '/lib/TicketCommentEntityMetaController.php';
require_once dirname(__FILE__) . '/lib/TicketComment.php';
require_once dirname(__FILE__) . '/lib/TicketCommentUIController.php';
//require_once dirname(__FILE__) . '/lib/TicketCommentInlineEntityForm.php';


require_once dirname(__FILE__) . '/includes/tickets.inc';
require_once dirname(__FILE__) . '/includes/tickets_category.inc';

/**
 * Implements hook_entity_info().
 */
function tickets_entity_info() {
  $info['ticket'] = array(
    'label' => 'Ticket',
    'module' => 'tickets',
    'base table' => 'ticket',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ticket_access_callback',
    'label callback' => 'ticket_label_callback',
    'controller class' => 'EntityAPIController', // 'Lgentity_Entity_MachineController',
    'entity class' => 'TicketEntity',
    'metadata controller class' => 'TicketEntityMetaController',
    'entity keys' => array('id' => 'ticket_id', 'bundle' => 'type'),
    'bundle keys' => array('bundle' => 'type'),
    'bundles' => array(
      'ticket' => array(
        'label' => 'Ticket',
        'admin' => array(
          'path' => 'admin/structure/tickets',
          'access arguments' => array('administer tickets'),
        ),
      ),
    ),
    'admin ui' => array(
      'path' => 'admin/structure/tickets',
      'file' => 'includes/tickets.admin.inc',
      'controller class' => 'EntityTicketUIController',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );
  $info['ticket_category'] = array(
    'label' => 'Ticket category',
    'module' => 'tickets',
    'base table' => 'ticket_category',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ticket_category_access_callback',
    'label callback' => 'ticket_category_label_callback',
    'controller class' => 'EntityAPIController', // 'Lgentity_Entity_MachineController',
    'entity class' => 'TicketCategoryEntity',
    'metadata controller class' => 'TicketCategoryEntityMetaController',
    'entity keys' => array('id' => 'ticket_cid', 'bundle' => 'type'),
    'bundle keys' => array('bundle' => 'type'),
    'bundles' => array(
      'ticket_category' => array(
        'label' => 'Ticket Category',
        'admin' => array(
          'path' => 'admin/structure/ticket-categorys',
          'access arguments' => array('administer ticket category'),
        ),
      ),
    ),
    'admin ui' => array(
      'path' => 'admin/structure/ticket-categorys',
      'file' => 'includes/tickets_category.admin.inc',
      'controller class' => 'TicketCategoryEntityUIController',
    ),
  );
  $info['ticket_comments'] = array(
    'label' => 'Ticket comment',
    'module' => 'tickets',
    'base table' => 'ticket_comments',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ticket_comment_access_callback',
    'label callback' => 'ticket_comment_label_callback',
    'controller class' => 'EntityAPIController', // 'Lgentity_Entity_MachineController',
    'entity class' => 'TicketCommentEntity',
    'metadata controller class' => 'EntityDefaultMetadataController',
    'entity keys' => array('id' => 'ticket_cid', 'bundle' => 'type'),
    'bundle keys' => array('bundle' => 'type'),
    'bundles' => array(
      'ticket_comments' => array(
        'label' => 'Ticket Comments',
        'admin' => array(
          'path' => 'admin/structure/ticket-comments',
          'access arguments' => array('administer ticket comments'),
        ),
      ),
    ),
    'admin ui' => array(
      'path' => 'admin/structure/ticket-comments',
      'file' => 'includes/tickets_category.admin.inc',
      'controller class' => 'TicketCommentEntityUIController',
    ),
  );
  
  return $info;
}


/**
 * Access callback for machine entity.
 */
function ticket_access_callback($op, $entity, $account, $entity_type) {
  return user_access('administer tickets');
}

/**
 * Label callback for machine entity.
 */
function ticket_label_callback($entity, $entity_type) {
//  return ucwords($entity->type) . " #{$entity->ticket_id}";
  return ucwords($entity->title);
}


/**
 * Access callback for machine entity.
 */
function ticket_category_access_callback($op, $entity, $account, $entity_type) {
  return user_access('administer ticket category');
}

/**
 * Label callback for machine entity.
 */
function ticket_category_label_callback($entity, $entity_type) {
//  return ucwords($entity->type) . " #{$entity->ticket_id}";
  return ucwords($entity->name);
}
/**
 * Access callback for machine entity.
 */
function ticket_comment_access_callback($op, $entity, $account, $entity_type) {
  return user_access('administer ticket comment');
}

/**
 * Label callback for machine entity.
 */
function ticket_comment_label_callback($entity, $entity_type) {
//  return ucwords($entity->type) . " #{$entity->ticket_id}";
  return ucwords($entity->name);
}

/**
 * Implements hook_permission
 */
function tickets_permission() {
  return array(
    'administer tickets' => array(
      'title' => t('Administer tickets'), 
      'description' => t('Perform administration tasks for tickets.'),
    ),
  );
}


/**
 * Implements hook_fied_extra_fields().
 */
function tickets_field_extra_fields() {
  $extra = array();
  $entity_info = entity_get_info();
  if (empty($entity_info)) return;
  
  if (isset($entity_info['ticket'])) {
    foreach ($entity_info['ticket']['bundles'] as $bundle => $info) {
      $extra['ticket'][$bundle] = array(
        'form' => array(
          'title' => array(
            'label' => t('Title'),
            'description' => t('The displayed title of the entity.'),
            'weight' => -5,
          ),
        ),
        'display' => array(
          'title' => array(
            'label' => t('Title'),
            'description' => t('The displayed title of the entity.'),
            'weight' => -5,
          ),
        ),
      );
      if ($bundle == 'ticket') {
//        tickets_add_body_field('ticket');
//        tickets_add_file_field('ticket');
//        tickets_add_entity_reference();
      }
    }
  }
  if (isset($entity_info['ticket_category'])) {
    foreach ($entity_info['ticket_category']['bundles'] as $bundle => $info) {
      $extra['ticket_category'][$bundle] = array(
        'form' => array(
          'name' => array(
            'label' => t('Name'),
            'description' => t('The displayed name of the entity.'),
            'weight' => -5,
          ),
        ),
        'display' => array(
          'title' => array(
            'label' => t('Name'),
            'description' => t('The displayed title of the entity.'),
            'weight' => -5,
          ),
        ),
      );
      if ($bundle == 'ticket_category') {
//        tickets_category_add_term_reference('ticket_category');
      }
    }
  }
  return $extra;
}

/**
 * Sets up content to show an individual model
 * @todo - get rid of drupal_set_title();
 */
function tickets_page_view($ticket, $view_mode = 'full', $langcode = NULL) {   
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  
  $ticket->content = array();
  
  field_attach_prepare_view('ticket', array($ticket->ticket_id => $ticket), $view_mode, $langcode);
  entity_prepare_view('ticket', array($ticket->ticket_id => $ticket), $langcode);
  $ticket->content += field_attach_view('ticket', $ticket, $view_mode, $langcode);
  

  $build = $ticket->content;
  // We don't need duplicate rendering info in ticket->content.

  $build += array(
    '#theme' => 'ticket',
    '#element' => $ticket,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );

  return $build;
}



/**
 * Menu title callback for showing individual entities
 */
function tickets_page_title(TicketEntity $ticket){
  return $ticket->name;
}

/**
 * Implements hook_views_api().
 */
function tickets_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'tickets') . '/views',
  );
}


/**
 * Implements hook_entity_info_alter().
 */
function tickets_entity_info_alter(&$entity_info) {
  if (isset($entity_info['ticket_category'])) {
    $entity_info['ticket_category']['inline entity form'] = array(
      'controller' => 'TicketCategoryInlineEntityFormController',
    );
  }
}


function tickets_form_alter($form, $form_state, $form_id) {
//  dsm($form_id);
}


function tickets_theme() {
  return array(
    'ticket' => array(
      'variables' => array('elements' => null),
      'template' => 'ticket',
    ),
  );
}

/**
 * Process variables for node.tpl.php
 *
 * Most themes utilize their own copy of node.tpl.php. The default is located
 * inside "modules/node/node.tpl.php". Look in there for the full list of
 * variables.
 *
 * The $variables array contains the following arguments:
 * - $node
 * - $view_mode
 * - $page
 *
 * @see node.tpl.php
 */
function template_preprocess_ticket(&$variables) {
//  kpr($variables);exit;
//  $variables['view_mode'] = $variables['elements']['#view_mode'];
//  // Provide a distinct $teaser boolean.
//  $variables['teaser'] = $variables['view_mode'] == 'teaser';
//  $variables['node'] = $variables['elements']['#node'];
//  $node = $variables['node'];
//
//  $variables['date']      = format_date($node->created);
//  $variables['name']      = theme('username', array('account' => $node));
//
//  $uri = entity_uri('node', $node);
//  $variables['node_url']  = url($uri['path'], $uri['options']);
//  $variables['title']     = check_plain($node->title);
//  $variables['page']      = $variables['view_mode'] == 'full' && node_is_page($node);
//
//  // Flatten the node object's member fields.
//  $variables = array_merge((array) $node, $variables);
//
//  // Helpful $content variable for templates.
//  $variables += array('content' => array());
////  kpr(debug_backtrace());
////  kpr(element_children($variables['elements']));exit;
//  foreach (element_children($variables['elements']) as $key) {
//    
//    $variables['content'][$key] = $variables['elements'][$key];
//  }
////  kpr($variables);
////  kpr($variables['content']);
////  exit;
//  // Make the field variables available with the appropriate language.
//  field_attach_preprocess('node', $node, $variables['content'], $variables);
//
//  // Display post information only on certain node types.
//  if (variable_get('node_submitted_' . $node->type, TRUE)) {
//    $variables['display_submitted'] = TRUE;
//    $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['name'], '!datetime' => $variables['date']));
//    $variables['user_picture'] = theme_get_setting('toggle_node_user_picture') ? theme('user_picture', array('account' => $node)) : '';
//  }
//  else {
//    $variables['display_submitted'] = FALSE;
//    $variables['submitted'] = '';
//    $variables['user_picture'] = '';
//  }
//
//  // Gather node classes.
//  $variables['classes_array'][] = drupal_html_class('node-' . $node->type);
//  if ($variables['promote']) {
//    $variables['classes_array'][] = 'node-promoted';
//  }
//  if ($variables['sticky']) {
//    $variables['classes_array'][] = 'node-sticky';
//  }
//  if (!$variables['status']) {
//    $variables['classes_array'][] = 'node-unpublished';
//  }
//  if ($variables['teaser']) {
//    $variables['classes_array'][] = 'node-teaser';
//  }
//  if (isset($variables['preview'])) {
//    $variables['classes_array'][] = 'node-preview';
//  }
//
//  // Clean up name so there are no underscores.
//  $variables['theme_hook_suggestions'][] = 'node__' . $node->type;
//  $variables['theme_hook_suggestions'][] = 'node__' . $node->nid;
}
