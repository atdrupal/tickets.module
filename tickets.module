<?php

define('TICKET_DEFAULT_VOCA_IMPORTANTCE', 'ticket_importance');
define('TICKET_DEFAULT_VOCA_STATE', 'ticket_state');
module_load_include('inc', 'tickets', 'includes/tickets');
module_load_include('inc', 'tickets', 'includes/tickets_category');

/**
 * Implements hook_entity_info().
 */
function tickets_entity_info() {
  $info['ticket'] = array(
    'label' => 'Ticket',
    'module' => 'tickets',
    'base table' => 'ticket',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ticket_access_callback',
    'label callback' => 'ticket_label_callback',
    'controller class' => 'EntityAPIController',
    'entity class' => 'TicketEntity',
    'metadata controller class' => 'TicketEntityMetaController',
    'entity keys' => array('id' => 'ticket_id', 'bundle' => 'type'),
    'bundle keys' => array('bundle' => 'type'),
    'bundles' => array(
      'ticket' => array(
        'label' => 'Ticket',
        'admin' => array(
          //Path manage fields
          'path' => 'admin/structure/tickets',
          'access arguments' => array('administer tickets'),
        ),
      ),
    ),
    'admin ui' => array(
      'path' => 'admin/structure/tickets',
      'file' => 'includes/tickets.admin.inc',
      'controller class' => 'EntityTicketUIController',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
      
     // Add translation support.
    'translation' => array(
      'locale' => TRUE,
      'entity_translation' => array(
        'bundle callback' => 'ticket_entity_translation_supported_type',
        //'base path' => 'admin/structure/tickets/manage/%ticket',
        'default settings' => array(
          'default_language' => LANGUAGE_NONE,
        ),
      ),
    ), 

    // Add title replacement support for translations.
    'field replacement' => array(
      'title' => array(
        'field' => array(
          'type' => 'text',
          'cardinality' => 1,
          'translatable' => TRUE,
        ),
        'instance' => array(
          'label' => t('Title'),
          'required' => TRUE,
          'settings' => array(
            'text_processing' => 0,
          ),
          'widget' => array(
            'weight' => -5,
          ),
        ),
      ),
    ),
  );
  $info['ticket_category'] = array(
    'label' => 'Ticket category',
    'module' => 'tickets',
    'base table' => 'ticket_category',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ticket_access_callback',
    'label callback' => 'ticket_category_label_callback',
    'controller class' => 'EntityAPIController', // 'Lgentity_Entity_MachineController',
    'entity class' => 'TicketCategoryEntity',
    'metadata controller class' => 'TicketCategoryEntityMetaController',
    'entity keys' => array('id' => 'ticket_cid', 'bundle' => 'type'),
    'bundle keys' => array('bundle' => 'type'),
    'bundles' => array(
      'ticket_category' => array(
        'label' => 'Ticket Category',
        'admin' => array(
          'path' => 'admin/structure/ticket-categorys',
          'access arguments' => array('administer ticket categorys'),
        ),
      ),
    ),
    'admin ui' => array(
      'path' => 'admin/structure/ticket-categorys',
      'file' => 'includes/tickets_category.admin.inc',
      'controller class' => 'TicketCategoryEntityUIController',
    ),
   
   
  );
  
  return $info;
}

/**
 * Support entity translation.
 */
function ticket_entity_translation_supported_type($type) {
  return 4;
}

/**
 * Access callback for machine entity.
 */
function ticket_access_callback($op, $entity, $account, $entity_type) {
  if (user_access('administer tickets')) return TRUE;
  
  if ($op == 'create' && user_access($op . ' ' . $entity_type)) return TRUE;
  
  if ($op == 'update') $op = 'edit';
  
  if (user_access($op . 'any' . $entity_type)) return TRUE;
  
  if (user_access($op . 'own' . $entity_type)) {
    if ($entity->uid == $account->uid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Label callback for machine entity.
 * @param type $entity
 * @param type $entity_type
 * @return type
 */
function ticket_label_callback($entity, $entity_type) {
  return ucwords($entity->title);
}


/**
 * Label callback for machine entity.
 * @param type $entity
 * @param type $entity_type
 * @return type
 */
function ticket_category_label_callback($entity, $entity_type) {
  return ucwords($entity->name);
}


/**
 * Implements hook_permission
 */
function tickets_permission() {
  return tickets_permission_info(array('Ticket','Ticket Category'));
}

/*
 * Define permission informations
 */
function tickets_permission_info($names = array()) {
  $tasks = array('View', 'Edit', 'Delete');
  $options = array('own', 'any');
  foreach ($names as $name) {
    $name_lower = strtolower($name);
    $permission['administer ' . $name_lower . 's'] = array('title' => t('Administer ' . $name . 's')); 
    $permission['create ' . $name_lower] = array('title' => t('Create new ' . $name)); 
    foreach ($tasks as $task) {
      foreach ($options as $option) {
        $task_name = strtolower($task);
        $permission["{$task_name} {$option} {$name}"] = array('title' => t("{$task} {$option} {$name}"));
      }
    }
  }
  
  return $permission; 
}


/**
 * Implements hook_fied_extra_fields().
 */
function tickets_field_extra_fields() {
  $extra = array();
  $entity_info = entity_get_info();
  if (empty($entity_info)) return;
  
  if (isset($entity_info['ticket'])) {
    foreach ($entity_info['ticket']['bundles'] as $bundle => $info) {
      $extra['ticket'][$bundle] = array(
        'form' => array(
          'title' => array(
            'label' => t('Title'),
            'description' => t('The displayed title of the entity.'),
            'weight' => -5,
          ),
          'weight' => array(
            'label' => t('weight'),
            'description' => t('The weight of the entity.'),
            'weight' => -4,
          ),
        ),
        'display' => array(
          'title' => array(
            'label' => t('Title'),
            'description' => t('The displayed title of the entity.'),
            'weight' => -5,
          ),
        ),
        
      );
    }
  }
  if (isset($entity_info['ticket_category'])) {
    foreach ($entity_info['ticket_category']['bundles'] as $bundle => $info) {
      $extra['ticket_category'][$bundle] = array(
        'form' => array(
          'name' => array(
            'label' => t('Name'),
            'description' => t('The displayed name of the entity.'),
            'weight' => -5,
          ),
        ),
        'display' => array(
          'title' => array(
            'label' => t('Name'),
            'description' => t('The displayed title of the entity.'),
            'weight' => -5,
          ),
        ),
      );
    }
  }
  return $extra;
}

/**
 * Sets up content to show an individual model
 * @todo - get rid of drupal_set_title();
 */
function tickets_page_view($ticket, $view_mode = 'full', $langcode = NULL) {   
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  
  // Allow modules to change the view mode.
  $context = array(
    'entity_type' => 'ticket',
    'entity' => $ticket,
    'langcode' => $langcode,
  );
  drupal_alter('entity_view_mode', $view_mode, $context);
  
  $ticket->content['#ticket'] = $ticket;
  
  field_attach_prepare_view('ticket', array($ticket->ticket_id => $ticket), $view_mode, $langcode);
  entity_prepare_view('ticket', array($ticket->ticket_id => $ticket), $langcode);
  $ticket->content += field_attach_view('ticket', $ticket, $view_mode, $langcode);
  
  // Allow modules to make their own additions to the comment.
  module_invoke_all('ticket_view', $ticket, $view_mode, $langcode);
  module_invoke_all('entity_view', $ticket, 'ticket', $view_mode, $langcode);
  
  $ticket->content += array('#view_mode' => $view_mode);
  $build = $ticket->content;
  // We don't need duplicate rendering info in ticket->content.
  unset($ticket->content);
  
  $build += array(
    '#theme' => 'ticket',
    '#elements' => $ticket,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );

  return $build;
}



/**
 * Menu title callback for showing individual entities
 */
function tickets_page_title(TicketEntity $ticket){
  return $ticket->name;
}

/**
 * Implements hook_views_api().
 */
function tickets_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'tickets') . '/views',
  );
}


/**
 * Extender inline entity form wiget
 * Implements hook_entity_info_alter().
 */
function tickets_entity_info_alter(&$entity_info) {
  if (isset($entity_info['ticket_category'])) {
    $entity_info['ticket_category']['inline entity form'] = array(
      'controller' => 'TicketCategoryInlineEntityFormController',
    );
  }
}

/**
 * Implement hook_theme()
 */
function tickets_theme() {
  return array(
    'ticket' => array(
      'render element' => 'elements',
      'template' => 'ticket',
    ),
  );
}

/**
 * Process variables for node.tpl.php
 *
 * Most themes utilize their own copy of node.tpl.php. The default is located
 * inside "modules/node/node.tpl.php". Look in there for the full list of
 * variables.
 *
 * The $variables array contains the following arguments:
 * - $node
 * - $view_mode
 * - $page
 *
 * @see node.tpl.php
 */
function template_preprocess_ticket(&$variables) {

  $ticket = $variables['elements']['#ticket'];
  $variables['ticket']    = $ticket;
  
  $variables['created']   = format_date($ticket->created);
  $variables['changed']   = format_date($ticket->changed);
  
  $account = user_load($ticket->uid);
  
  $variables['author']    = theme('username', array('account' => $account));
  $variables['picture']   = theme_get_setting('toggle_comment_user_picture') ? theme('user_picture', array('account' => $account)) : '';
  $variables['signature'] = $account->signature;

  $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['author'], '!datetime' => $variables['created']));

  field_attach_preprocess('ticket', $ticket, $variables['elements'], $variables);

  // Helpful $content variable for templates.
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['title']     = check_plain($ticket->title);
  kpr($variables);
}


/**
 * Alter query get user assigned
 * 
 * This alter hook, provided by core, and known as hook_query_TAG_alter().
 *
 * In this example we alter the query, to filter values from entity
 * reference field.
 * We join the current query if the field name is 'field_foo', to the
 * 'field_bar' table and add a condition based on the joined table.
 */
function tickets_query_entityreference_alter(QueryAlterableInterface $query) {

  // Get the base table.
  $tables = $query->getTables();
  $base_table = key($tables);
  $query->innerJoin('users_roles', 'ur', 'ur.uid = ' . $base_table . '.uid');
  $role = user_role_load_by_name('administrator');
  // Add conditions.
  //Now get only administrator role.
  $query->condition('ur.rid', $role->rid);
}




/**
 * Implements hook template_preprocess_views_view_table()
 */
function tickets_preprocess_views_view_table(&$vars) {
  if ($vars['view']->name == 'ticket_assigned') {
    if (isset($vars['row_classes'])) {
      $vars['row_classes'] = unserialize(strtolower(serialize($vars['row_classes']))); 
    }
  }
}

function tickets_form_alter($form, $form_state, $id) {
//  kpr($id);
}


/**
 * Implement hook_menu()
 * @return string
 */
function tickets_menu() {
  $items['ticket/%ticket'] = array(
    'title callback' => 'tickets_page_title',
    'title arguments' => array(1),
    'page callback' => 'tickets_page_view',
    'page arguments' => array(1),
    'access arguments' => array(TRUE),
  );
  return $items;
}


/**
 * Provide function access to ticket
 */

/**
 * Fetch a ticket object.
 *
 * @param $ticket_id
 *   Integer specifying the ticket id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $ticket object or FALSE if it cannot be loaded.
 *
 * @see ticket_load_multiple()
 */
function ticket_load($ticket_id, $reset = FALSE) {
  $tickets = ticket_load_multiple(array($ticket_id), array(), $reset);
  return reset($tickets);
}

/**
 * Load multiple tickets based on certain conditions.
 *
 * @param $ticket_ids
 *   An array of ticket IDs.
 * @param $conditions
 *   An array of conditions to match against the {ticket} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of ticket objects, indexed by pid.
 *
 * @see entity_load()
 * @see ticket_load()
 */
function ticket_load_multiple($ticket_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ticket', $ticket_ids, $conditions, $reset);
}

/**
 * Deletes a ticket.
 */
function ticket_delete(TicketEntity $ticket) {
  $ticket->delete();
}

/**
 * Delete multiple tickets.
 *
 * @param $pids
 *   An array of ticket IDs.
 */
function ticket_delete_multiple(array $ticket_ids) {
  entity_get_controller('ticket')->delete($ticket_ids);
}

/**
 * Create a new ticket object.
 */
function ticket_create(array $values) {
  return new TicketEntity($values);
}


/**
 * Saves a ticket to the database.
 *
 * @param $ticket
 *   The ticket object.
 */
function ticket_save(TicketEntity $ticket) {
  return $ticket->save();
}






/**
 * Provide function access to ticket_category
 */

/**
 * Fetch a ticket_category object.
 *
 * @param $ticket_category_id
 *   Integer specifying the ticket_category id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $ticket_category object or FALSE if it cannot be loaded.
 *
 * @see ticket_category_load_multiple()
 */
function ticket_category_load($ticket_category_id, $reset = FALSE) {
  $ticket_categorys = ticket_category_load_multiple(array($ticket_category_id), array(), $reset);
  return reset($ticket_categorys);
}

/**
 * Load multiple ticket_categorys based on certain conditions.
 *
 * @param $ticket_cids
 *   An array of ticket_category IDs.
 * @param $conditions
 *   An array of conditions to match against the {ticket_category} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of ticket_category objects, indexed by pid.
 *
 * @see entity_load()
 * @see ticket_category_load()
 */
function ticket_category_load_multiple($ticket_cids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ticket_category', $ticket_cids, $conditions, $reset);
}

/**
 * Deletes a ticket_category.
 */
function ticket_category_delete(TicketEntity $ticket_category) {
  $ticket_category->delete();
}

/**
 * Delete multiple ticket_categorys.
 *
 * @param $pids
 *   An array of ticket_category IDs.
 */
function ticket_category_delete_multiple(array $ticket_cids) {
  entity_get_controller('ticket_category')->delete($ticket_cids);
}

/**
 * Create a new ticket_category object.
 */
function ticket_category_create(array $values) {
  return new TicketEntity($values);
}


/**
 * Saves a ticket_category to the database.
 *
 * @param $ticket_category
 *   The ticket_category object.
 */
function ticket_category_save(TicketEntity $ticket_category) {
  return $ticket_category->save();
}



